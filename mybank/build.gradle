buildscript {
    ext {
        versions = [
                "springBoot": "1.5.9.RELEASE",
                "spring": "5.0.2.RELEASE",
                "springCrypto": "5.0.0.RELEASE",
                "hibernate": "5.2.3.Final",
                "mockito": "1.10.19",
                "hamcrest": "1.3",
                "assertj": "3.8.0",
                "junit": "4.12",
                "lombok": "1.16.18",
                "flywaydb": "5.0.2",
                "mysqlConnector": "5.1.45",
                "jacoco": "0.7.9",
                "h2": "1.4.196",
                "flywaydb": "5.0.2",
               	"restAssured": "3.0.5"
        ]
    }
    
    repositories {
    	jcenter()
        mavenCentral()
    }
    
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${versions.springBoot}"
        classpath "io.spring.gradle:dependency-management-plugin:${versions.dependencyManagement}"
    }
}

allprojects {
    group 'com.itexhange.demo.mybank'
    version '1.0'

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'eclipse'
    
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    compileJava.options.encoding = 'UTF-8'
  	
    jacoco {
    	toolVersion = "${versions.jacoco}"
    }
  	
  	jacocoTestReport {
  		reports {
  			xml.enabled false
        	csv.enabled false
        	html.destination file("${buildDir}/jacocoHtml")
  		}
  	}
  	
  	//integration tests configuration
	configurations {
	    itestCompileOnly.extendsFrom testCompileOnly
	    itestCompile.extendsFrom testCompile
	    itestRuntime.extendsFrom testRuntime
	}
	
	sourceSets {
	    itest {
	        compileClasspath += main.output + test.output
	        runtimeClasspath += main.output + test.output
	        java.srcDir file('src/itest/java')
	    }
	    test {
	        resources.srcDir file('src/itest/resources')
	    }
	}
	
	task itest(type: Test) {
	    testClassesDir = sourceSets.itest.output.classesDir
	    classpath = sourceSets.itest.runtimeClasspath
	    testLogging {
	        events "passed", "skipped", "failed"
	    }
	
	    // IT's are hungry, set heap size for the test JVM(s). FIXME: what is persisted across tests and eating mem
	    minHeapSize = "512m"
	    maxHeapSize = "3072m"
	    // IT's are large enough and close context by themselves so this will improve memory usage:
	    forkEvery = 1
	}
}

subprojects {
	
	repositories {
		jcenter()
		mavenCentral()
	}

	dependencies {	
		compileOnly "org.projectlombok:lombok:${versions.lombok}"
		
    	testCompile "org.projectlombok:lombok:${versions.lombok}"
    	testCompile "org.assertj:assertj-core:${versions.assertj}"
    	testCompile "org.mockito:mockito-core:${versions.mockito}"
    	testCompile "junit:junit:${versions.junit}"	
    	testCompile "org.hamcrest:hamcrest-core:${versions.hamcrest}"
    	testCompile "com.h2database:h2:${versions.h2}"
    	implementation "com.google.guava:guava:21.0"
	}
	
	jacocoTestReport {
	    reports {
	        xml.enabled false
	        csv.enabled false
	        html.destination file("${buildDir}/jacocoHtml")
	    }
	}
}